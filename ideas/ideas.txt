Concepts for single player Interactive Fiction mode:
----------------------------------------------------
'recap' command to show the important actions and events so far (need code in game to store events in this list)
Tkinter gui driver (textarea for output, editbox for commands) -> inherit from regular driver
Pictures for locations (viewable in gui driver only ofcourse)


Concepts for multiplayer MUD mode (and not really for single player I.F.):
--------------------------------------------------------------------------
Check for and disable IF-specific stuff.
Write stuff to a logfile for the server admins.
Mailbox system: can mail messages, money and items to other players. Only when mailbox in environment?
Bulletin boards.
Pets: tame/befriend/abandon (charisma/luck)
Combat: backstab (stealth/charisma/luck/agility?  vs luck/wisdom/agility)
Follow other creatures: follow.  If you have a follower and want to try to stop him: evade
Party: team up with other players and share quest and combat experience
Skills: stealth, lockpicking, ...
Vendors and shops: stock, sell stuff, buy stuff, haggle?
World zones: (optional) timed zone resets to reset to starting configuration. Or global server reset?

Do something with the circlemud xml data:
  http://inventwithpython.com/blog/2012/03/19/circlemud-data-in-xml-format-for-your-text-adventure-game/


General ideas/TODO:
-------------------
Console output: dynamically highlight names/aliases/exits/items?

input should be case insensitive (everything except stuff in quotes - the message)
  commands, adverbs, names - all should be lowercased and compared by lowercase.
  object names and aliases should all be stored lowercased, object titles however not.

arrivals/departures (and spawned items) should be passed to notify_appear/notify_disappear functions.

parse bug: say "I don't get it" -> it thinks the message stops at the single quote in "don't".

Load game from zipfile.
Signed game files (to avoid basic tampering)
Obfuscated/encrypted resource files (to avoid easy spoilers by simply reading the game files)

Parser: remember previous objects/creatures so you can refer to them as 'it/him/her/them'.

Parser: allow simple question/answer dialog. 'no/yes' verbs? Or use continuations?
There's also some work to be done to add a confirmation question to certain verbs, such as 'drop all'.

Invisible objects (only visible to a wizard.) Perhaps easiest by setting title and description to None?
(name can't be None because the object needs a way to identify it).

Wiretaps: as soon as invisible objects and room message notifications are implemented, replace the
    wiretap attribute on Location by a real wiretap object that's placed in the room?
    This could then replay the messages it receives to the owner.
    It needs to auto-destruct if the owner is gone.
    Wiretaps on livings are a bit harder to replace by a normal object because they need
    to intercept the stuff that's told to the living, and there's no regular game mechanic to do that,
    unless Living.tell() is going to broadcast to all items in its inventory... (also nested in bags!)
    Maybe implement it all as a special Effect object that is stored in Object.effects?
    Or just leave it be, the wiretap logic isn't that complex to keep around as separate attributes.

allow_move/item.move: pass the verb as well so it can output specific messages (you can't move/take/drop it).
Language system: speak/understand different languages?
should Exit inherit from MudObject? (it contains a fair amount of similar methods now)
use lang.a more?
less use of isinstance?
prototypes to extend items/npc instead of inheritance? or use a DSL altogether to define the basic world stuff?

test when player name == npc name (movement, examine, talk, soul emotes, wiretap, destroy player)
test with multiple items of same name in room, in inventory, in bag

Change living location logic so that livings can sit inside a container item too.
Then:  go-in (wizard): step into something, go-out (wizard): step out of current location
+ take <living> actually working! (take ant, trap rabbit in cage, ...)

DAMAGE TYPES
------------
blunt, slash, pierce, water, shock, cold, heat, gas, acid, magic, poison,
disease, trauma, psionic, suffocation, deathray, emotional, sonic,
E.M.P., karma, drama, pressure, underpressure, inertia


Light/Dark
----------
light level in rooms: dark/light? or three states?  (0=pitch black, 0.5=dark/dusk, 1=normal daylight)
darkness in locations -> can't see location/exits/items/players (unless they're fluorescent, or unless you explicitly examine <direction>?)
if there's a lightsource in the room (or someone has a light source in their inventory), the room is lit.
 Conditional location description (light/dark etc)
