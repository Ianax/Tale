Concepts for single player Interactive Fiction (and perhaps MUD):
-----------------------------------------------------------------
Disable certain commands and features that might break immersion (such as 'stats').
tkinter gui driver (textarea for output, editbox for commands) -> inherit from regular driver
pictures for locations (viewable in gui driver only ofcourse)


Concepts that could be implemented for a MUD (but perhaps not for single player IF):
------------------------------------------------------------------------------------
MUD game mode: disable StoryCompleted exception and player status, and other IF-specific stuff
Write stuff to a logfile for the server admins.
Mailbox system: can mail messages, money and items to other players. Only when mailbox in environment?
Bulletin boards.
Pets: tame/befriend/abandon (charisma/luck)
Combat: backstab (stealth/charisma/luck/agility?  vs luck/wisdom/agility)
Follow other creatures: follow.  If you have a follower and want to try to stop him: evade
Party: team up with other players and share quest and combat experience
Skills: stealth, lockpicking, ...
Vendors and shops: stock, sell stuff, buy stuff, haggle?
World zones: (optional) timed zone resets to reset to starting configuration. Or global server reset?

Do something with the circlemud xml data:
  http://inventwithpython.com/blog/2012/03/19/circlemud-data-in-xml-format-for-your-text-adventure-game/


General ideas/TODO's:
---------------------
Two game modes: IF and MUD.
Let objects register non-standard verbs with the location they're in.
(For instance a computer might register 'hack' and 'type'.)

Driver/mudlib: Support separate 'mudlibs' (games) so you can 'install' different game files.
               Move the hardcoded 'demo' mudlib parts into a separate 'demo/test game'.
               Also allow for extra commands to be added to the driver (both wizard and normal).
               Allow commands to replace the builtin commands (with explicit flag?)

Parser: remember previous objects/creatures so you can refer to them as 'it/him/her/them'.

Parser: allow simple question/answer dialog. 'no/yes' verbs? Or use continuations?
There's also some work to be done to add a confirmation question to certain verbs, such as 'drop all'.

Invisible objects (only visible to a wizard.) Perhaps easiest by setting title and description to None?
(name can't be None because the object needs a way to identify it).

Wiretaps: as soon as invisible objects and room message notifications are implemented, replace the
    wiretap attribute on Location by a real wiretap object that's placed in the room?
    This could then replay the messages it receives to the owner.
    It needs to auto-destruct if the owner is gone.
    Wiretaps on livings are a bit harder to replace by a normal object because they need
    to intercept the stuff that's told to the living, and there's no regular game mechanic to do that,
    unless Living.tell() is going to broadcast to all items in its inventory... (also nested in bags!)
    Maybe implement it all as a special Effect object that is stored in Object.effects?
    Or just leave it be, the wiretap logic isn't that complex to keep around as separate attributes.

should Exit inherit from MudObject? (it contains a couple of similar methods now)
use lang.a more?
less use of isinstance?
prototypes to extend items/npc instead of inheritance?
Language system: speak/understand different languages?

test when player name == npc name (movement, examine, talk, soul emotes, wiretap, destroy player)
test with multiple items of same name in room, in inventory, in bag

Items or NPC's "listening" to messages in a room:
notify_tell(parsed, actor): a more convenient way to 'listen' to messages.
Defined on location. Calls recursively on all items, livings and items in inventory.
This is different from the normal tell(), because that only provides the rendered message
string instead of the parsed objects, and isn't called recursively on inventory items.

Change living location logic so that livings can sit inside a container item too.
Then:  go-in (wizard): step into something, go-out (wizard): step out of current location
+ take <living> actually working! (take ant, trap rabbit in cage, ...)

DAMAGE TYPES
------------
blunt, blade, knife, water, shock, cold, heat, gas, acid, magic, poison,
disease, trauma, pierce, psionic, anoxia, deathray, emotional, sonic,
emp, other, karma, drama, overpressure, underpressure, inertia


Light/Dark
----------
light level in rooms: dark/light? or three states?  (0=pitch black, 0.5=dark/dusk, 1=normal daylight)
darkness in locations -> can't see location/exits/items/players (unless they're fluorescent, or unless you explicitly examine <direction>?)
if there's a lightsource in the room (or someone has a light source in their inventory), the room is lit.
 Conditional location description (light/dark etc)
